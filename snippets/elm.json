{
  ".source.elm": {
    "negate": {
      "prefix": "negate",
      "body": "negate ${1:number}",
      "description": "number -> number"
    },
    "turns": {
      "prefix": "turns",
      "body": "turns ${1:float}",
      "description": "Float -> Float"
    },
    "always": {
      "prefix": "always",
      "body": "always ${1:a} ${2:b}",
      "description": "a -> b -> a"
    },
    "logBase": {
      "prefix": "logBase",
      "body": "logBase ${1:float} ${2:float}",
      "description": "Float -> Float -> Float"
    },
    "truncate": {
      "prefix": "truncate",
      "body": "truncate ${1:float}",
      "description": "Float -> Int"
    },
    "clamp": {
      "prefix": "clamp",
      "body": "clamp ${1:number} ${2:number} ${3:number}",
      "description": "number -> number -> number -> number"
    },
    "compare": {
      "prefix": "compare",
      "body": "compare ${1:comparable} ${2:comparable}",
      "description": "comparable -> comparable -> Order"
    },
    "curry": {
      "prefix": "curry",
      "body": "curry ${1:function} ${2:a} ${3:b}",
      "description": "((a,b) -> c) -> a -> b -> c"
    },
    "flip": {
      "prefix": "flip",
      "body": "flip ${1:function} ${2:function}",
      "description": "(a -> b -> c) -> (b -> a -> c)"
    },
    "toPolar": {
      "prefix": "toPolar",
      "body": "toPolar ${1:tuple}",
      "description": "(Float,Float) -> (Float,Float)"
    },
    "first": {
      "prefix": "first",
      "body": "first ${1:tuple}",
      "description": "(a,b) -> a"
    },
    "identity": {
      "prefix": "identity",
      "body": "identity ${1:a}",
      "description": "a -> a"
    },
    "isNaN": {
      "prefix": "isNaN",
      "body": "isNaN ${1:float}",
      "description": "Float -> Bool"
    },
    "min": {
      "prefix": "min",
      "body": "min ${1:comparable} ${2:comparable}",
      "description": "comparable -> comparable -> comparable"
    },
    "not": {
      "prefix": "not",
      "body": "not ${1:bool}",
      "description": "Bool -> Bool"
    },
    "rem": {
      "prefix": "rem",
      "body": "rem ${1:int} ${2:int}",
      "description": "Int -> Int -> Int"
    },
    "second": {
      "prefix": "second",
      "body": "second ${1:tuple}",
      "description": "(a,b) -> b"
    },
    "toFloat": {
      "prefix": "toFloat",
      "body": "toFloat ${1:int}",
      "description": "Int -> Float"
    },
    "toString": {
      "prefix": "toString",
      "body": "toString ${1:a}",
      "description": "a -> String"
    },
    "uncurry": {
      "prefix": "uncurry",
      "body": "uncurry ${1:function} ${2:tuple}",
      "description": "(a -> b -> c) -> (a,b) -> c"
    },
    "xor": {
      "prefix": "xor",
      "body": "xor ${1:bool} ${2:bool}",
      "description": "Bool -> Bool -> Bool"
    },
    "Module": {
      "prefix": "module",
      "body": [
        "module ${1:Name} exposing (${2:..})"
      ],
      "description": "Module definition"
    },
    "Import": {
      "prefix": "import",
      "body": [
        "import ${1:Name} exposing (${2:..})"
      ],
      "description": "Unqualified import"
    },
    "Case of": {
      "prefix": "caseof",
      "body": [
        "case ${1:expression} of",
        "\t${2:option1} ->",
        "\t\t$3",
        "",
        "\t${4:option2} ->",
        "\t$5"
      ],
      "description": "Case of expression with 2 alternatives"
    },
    "Multi-line comment": {
      "prefix": "comment",
      "body": [
        "{-",
        "$0",
        "-}"
      ],
      "description": "Multi-line comment"
    },
    "Record": {
      "prefix": "record",
      "body": [
        "${recordName} =",
        "\t{ ${key1} = ${value1}",
        "\t, ${key2} = ${value2}",
        "\t}"
      ],
      "description": "Record"
    },
    "RecordType": {
      "prefix": "recordtype",
      "body": [
        "type alias ${recordName} =",
        "\t{ ${key1} : ${ValueType1}",
        "\t, ${key2} : ${ValueType2}",
        "\t}"
      ],
      "description": "Record type"
    },
    "Update record": {
      "prefix": "recordupdate",
      "body": [
        "{ ${1:recordName} | ${2:key} = $0 }"
      ],
      "description": "Update record"
    },
    "Anonymous function": {
      "prefix": "anonymous",
      "body": [
        "\\ ${argument} -> ${argument}$0"
      ],
      "description": "Anonymous function"
    },
    "Union type": {
      "prefix": "union",
      "body": [
        "type ${Typename}",
        "\t= ${Value1}",
        "\t| ${Value2}"
      ],
      "description": "Union type"
    },
    "Message": {
      "prefix": "msg",
      "body": [
        "type Msg",
        "\t= NoOp",
        "\t| ${Message}"
      ],
      "description": "Default message union type"
    },
    "Function": {
      "prefix": "fun",
      "body": [
        "${functionName} : ${ArgumentType} -> ${ReturnType}",
        "${functionName} ${argumentName} =",
        "\t${functionBody}"
      ],
      "description": "Function with type annotation"
    },
    "Let expression": {
      "prefix": "letin",
      "body": [
        "let",
        "\t$1",
        "in",
        "$0"
      ],
      "description": "Let expression"
    },
    "Update function": {
      "prefix": "update",
      "body": [
        "update : Msg -> Model -> ( Model, Cmd Msg )",
        "update msg model =",
        "\tcase msg of",
        "\t\tNoOp ->",
        "\t\t\t( model, Cmd.none )",
        "",
        "\t\t${option1} ->",
        "\t\t\t$0"
      ],
      "description": "Default update function"
    },
    "View function": {
      "prefix": "view",
      "body": [
        "view : Model -> Html Msg",
        "view model =",
        "\t$0"
      ],
      "description": "Default view function"
    },
    "Incoming port": {
      "prefix": "portin",
      "body": [
        "port ${portName} : (${Typename} -> msg) -> Sub msg"
      ],
      "description": "Incoming port"
    },
    "Outgoing port": {
      "prefix": "portout",
      "body": [
        "port ${portName} : ${Typename} -> Cmd msg"
      ],
      "description": "Outgoing port"
    },
    "Browser Sandbox": {
      "prefix": "mainsandbox",
      "body": [
        "main : Program () Model Msg",
        "main =",
        "\tBrowser.sandbox",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t}"
      ],
      "description": "Main Browser Sandbox"
    },
    "Browser Element": {
      "prefix": "mainelement",
      "body": [
        "main : Program () Model Msg",
        "main =",
        "\tBrowser.element",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t, subscriptions = subscriptions",
        "\t\t}"
      ],
      "description": "Main Browser Element"
    },
    "Browser Document": {
      "prefix": "maindocument",
      "body": [
        "main : Program () Model Msg",
        "main =",
        "\tBrowser.document",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t, subscriptions = subscriptions",
        "\t\t}"
      ],
      "description": "Main Browser Document"
    },
    "Browser Application": {
      "prefix": "mainapplication",
      "body": [
        "main : Program () Model Msg",
        "main =",
        "\tBrowser.application",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t, subscriptions = subscriptions",
        "\t\t, onUrlChange = onUrlChange",
        "\t\t, onUrlRequest = onUrlRequest",
        "\t\t}"
      ],
      "description": "Main Browser Application"
    },
    "Subscriptions": {
      "prefix": "subscriptions",
      "body": [
        "subscriptions : Model -> Sub Msg",
        "subscriptions model =",
        "\tSub.none"
      ],
      "description": "Subscriptions"
    },
    "defaultModel": {
      "prefix": "elmdmodel",
      "body": [
        "type alias Model =",
        "\t{ statusText : String",
        "\t}",
        "",
        "",
        "model : Model",
        "model =",
        "\t{ statusText = \"Ready\"",
        "\t}"
      ],
      "description": "A default model with type declaration"
    },
    "Browser.sandbox": {
      "prefix": "Browser.sandbox",
      "body": [
        "module ${Name} exposing (Model, Msg, update, view, subscriptions, init)",
        "",
        "import Html exposing (..)",
        "import Browser",
        "",
        "",
        "main : Program () Model Msg",
        "main =",
        "\tBrowser.sandbox",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t}",
        "",
        "",
        "type alias Model =",
        "\t{ ${property} : ${propertyType}",
        "\t}",
        "",
        "",
        "init : Model",
        "init =",
        "\tModel ${modelInitialValue}",
        "",
        "",
        "type Msg",
        "\t= ${Msg1}",
        "\t| ${Msg2}",
        "",
        "",
        "update : Msg -> Model -> Model",
        "update msg model =",
        "\tcase msg of",
        "\t\t${Msg1} ->",
        "\t\t\tmodel",
        "",
        "\t\t${Msg2} ->",
        "\t\t\tmodel",
        "",
        "",
        "view : Model -> Html Msg",
        "view model =",
        "\tdiv []",
        "\t\t[ text \"New Sandbox\" ]",
        "",
        "",
        "$0"
      ],
      "description": "Browser Sandbox"
    },
    "Browser.element": {
      "prefix": "Browser.element",
      "body": [
        "module ${Name} exposing (Model, Msg, update, view, subscriptions, init)",
        "",
        "import Html exposing (..)",
        "import Browser",
        "",
        "",
        "main : Program ${flags} Model Msg",
        "main =",
        "\tBrowser.element",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t, subscriptions = subscriptions",
        "\t\t}",
        "",
        "",
        "type alias Model =",
        "\t{ key : Nav.Key",
        "\t, url : Url.Url",
        "\t, ${property} : ${propertyType}",
        "\t}",
        "",
        "",
        "init : ${flags} -> (Model, Cmd Msg)",
        "init flags =",
        "\t(Model ${modelInitialValue}, Cmd.none)",
        "",
        "",
        "type Msg",
        "\t= ${Msg1}",
        "\t| ${Msg2}",
        "",
        "",
        "update : Msg -> Model -> (Model, Cmd Msg)",
        "update msg model =",
        "\tcase msg of",
        "\t\t${Msg1} ->",
        "\t\t\t(model, Cmd.none)",
        "",
        "\t\t${Msg2} ->",
        "\t\t\t(model, Cmd.none)",
        "",
        "",
        "subscriptions : Model -> Sub Msg",
        "subscriptions model =",
        "\tSub.none",
        "",
        "",
        "view : Model -> Html Msg",
        "view model =",
        "\tdiv []",
        "\t\t[ text \"New Sandbox\" ]",
        "",
        "",
        "$0"
      ],
      "description": "Browser Element"
    },
    "Browser.document": {
      "prefix": "Browser.document",
      "body": [
        "module ${Name} exposing (Model, Msg, update, view, subscriptions, init)",
        "",
        "import Html exposing (..)",
        "import Browser",
        "",
        "",
        "main : Program ${flags} Model Msg",
        "main =",
        "\tBrowser.document",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t, subscriptions = subscriptions",
        "\t\t}",
        "",
        "",
        "type alias Model =",
        "\t{ ${property} : ${propertyType}",
        "\t}",
        "",
        "",
        "init : ${flags} -> (Model, Cmd Msg)",
        "init flags =",
        "\t(Model ${modelInitialValue}, Cmd.none)",
        "",
        "",
        "type Msg",
        "\t= ${Msg1}",
        "\t| ${Msg2}",
        "",
        "",
        "update : Msg -> Model -> (Model, Cmd Msg)",
        "update msg model =",
        "\tcase msg of",
        "\t\t${Msg1} ->",
        "\t\t\t(model, Cmd.none)",
        "",
        "\t\t${Msg2} ->",
        "\t\t\t(model, Cmd.none)",
        "",
        "",
        "subscriptions : Model -> Sub Msg",
        "subscriptions model =",
        "\tSub.none",
        "",
        "",
        "view : Model -> Browser.Document Msg",
        "view model =",
        "\t{ title = \"Document Title\"",
        "\t, body =",
        "\t\t[ div []",
        "\t\t\t[ text \"New Document\" ]",
        "\t\t]",
        "\t}",
        "",
        "",
        "$0"
      ],
      "description": "Browser Document"
    },
    "Browser.application": {
      "prefix": "Browser.application",
      "body": [
        "module ${Name} exposing (Model, init, Msg, update, view, subscriptions)",
        "",
        "import Html exposing (..)",
        "import Browser",
        "import Browser.Navigation as Nav",
        "import Url",
        "",
        "",
        "main : Program ${flags} Model Msg",
        "main =",
        "\tBrowser.application",
        "\t\t{ init = init",
        "\t\t, view = view",
        "\t\t, update = update",
        "\t\t, subscriptions = subscriptions",
        "\t\t, onUrlRequest = UrlRequested",
        "\t\t, onUrlChange = UrlChanged",
        "\t\t}",
        "",
        "",
        "type alias Model =",
        "\t{ key : Nav.Key",
        "\t, url : Url.Url",
        "\t, ${property} : ${propertyType}",
        "\t}",
        "",
        "",
        "init : ${flags} -> Url.Url -> Nav.Key -> (Model, Cmd Msg)",
        "init flags url key =",
        "\t(Model ${modelInitialValue}, Cmd.none)",
        "",
        "",
        "type Msg",
        "\t= ${Msg1}",
        "\t| ${Msg2}",
        "\t| UrlRequested Browser.UrlRequest",
        "\t| UrlChanged Url.Url",
        "",
        "",
        "update : Msg -> Model -> (Model, Cmd Msg)",
        "update msg model =",
        "\tcase msg of",
        "\t\t${Msg1} ->",
        "\t\t\t(model, Cmd.none)",
        "",
        "\t\t${Msg2} ->",
        "\t\t\t(model, Cmd.none)",
        "",
        "\t\tUrlRequested urlRequest ->",
        "\t\t\tcase urlRequest of",
        "\t\t\t\tBrowser.Internal url ->",
        "\t\t\t\t\t( model, Nav.pushUrl model.key (Url.toString url) )",
        "",
        "\t\t\t\tBrowser.External href ->",
        "\t\t\t\t\t( model, Nav.load href )",
        "",
        "\t\tUrlChanged url ->",
        "\t\t\t( { model | url = url }",
        "\t\t\t, Cmd.none",
        "\t\t\t)",
        "",
        "",
        "subscriptions : Model -> Sub Msg",
        "subscriptions model =",
        "\tSub.none",
        "",
        "",
        "view : Model -> Browser.Document Msg",
        "view model =",
        "\t{ title = \"Application Title\"",
        "\t, body =",
        "\t\t[ div []",
        "\t\t\t[ text \"New Application\" ]",
        "\t  ]",
        "\t}",
        "",
        "",
        "$0"
      ],
      "description": "Browser Application"
    },
    "Elm-test describe": {
      "prefix": "describe",
      "body": [
        "describe \"${1:name}\"",
        "\t[ $0",
        "\t]"
      ],
      "description": "describe block in Elm-test"
    },
    "Elm-test test": {
      "prefix": "test",
      "body": [
        "test \"${1:name}\" <|",
        "\t\\_ ->",
        "\t\t$0"
      ],
      "description": "test block in Elm-test"
    },
    "todo": {
      "prefix": "todo",
      "body": "-- TODO: $0",
      "description": "TODO comment"
    }
  }
}
